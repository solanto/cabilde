import Head from "next/head"
import {
  Form,
  Fieldset as FieldSet,
  Label,
  TextInput,
  Dropdown,
  Textarea as TextArea,
  ButtonGroup,
  Button,
  ComboBox,
  Accordion
} from "@trussworks/react-uswds"
import styles from "../styles/Mensaje.module"
import { representantes } from "../data/gov"
import { useRouter } from "next/router"
import { renderName, slugifyName } from "../lib/render-name"
import { normalize } from "normalize-diacritics"
import FuzzySearch from "fuzzy-search"
import { AsyncSelect } from "../components/select"
import { CopyToClipboard } from "react-copy-to-clipboard"
import { decompressFromEncodedURIComponent as URIDecompress } from "lz-string"
import { getSharingURL } from "./api/mensaje/compartir"
import { useState } from "react"
import ensureArray from "../lib/ensure-array"
import QRCode from "qrcode.react"
import domain from "../data/domain"

export async function getServerSideProps({ query: { s: compressedSujeto, m: compressedMensaje, r: unsafeReceptores } }) {
  let mensaje, sujeto

  try {
    sujeto = URIDecompress(compressedSujeto)
    mensaje = URIDecompress(compressedMensaje)
  } catch (error) {
    if (error instanceof TypeError) {
      sujeto = ""
      mensaje = ""
    } else throw(error)
  }

  return {
    props: {
      mensaje,
      sujeto,
      receptores: ensureArray(unsafeReceptores).map(slug => (
        {
          value: slug,
          label: renderName(
            representantes
              .find(({ nombre }) => slugifyName(nombre) == slug)
              .nombre
          )
        }
      )), 
      todosRepNombres: await Promise.all(
        representantes.map(async ({ nombre }) => (
          {
            name: renderName(nombre),
            normalized: await normalize(renderName(nombre)),
            slug: slugifyName(nombre)
          }
        ))
      )
    }
  }
}

const Mensaje = ({ todosRepNombres, receptores, mensaje, sujeto }) => {
  const router = useRouter()
  console.log(domain)

  const repSearch = new FuzzySearch(todosRepNombres, ["name", "normalized"], {
      caseSensitive: false
  })

  const [selectedRepsValue, updateSelectedRepsValue] = useState(receptores || [])
  const [subjectValue, updateSubjectValue] = useState(sujeto || "")
  const [messageValue, updateMessageValue] = useState(mensaje || "")

  console.log(router.asPath)

  const [messagePath, updateMessagePath] = useState(router.asPath)
  
  const shallowSharingUpdate = async event => {
    event.preventDefault()

    const { url } = getSharingURL({
      r: selectedRepsValue.map(({ value }) => value),
      s: subjectValue,
      m: messageValue,
      redirect: false
    })

    updateMessagePath(url)

    router.push(url, url, {
      shallow: true,
      scroll: false
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <section>
          <Form>
            <FieldSet>
              <Label htmlFor="r">Mándales este mensaje a:</Label>
              <AsyncSelect
                name="r"
                cacheOptions
                loadOptions={(input, callback) => callback(
                  repSearch.search(input.trim()).map(({ name, slug }) => ({
                    value: slug,
                    label: name
                  }))
                )}
                isMulti
                hideSelectedOptions
                placeholder="Escribe unos nombres…"
                noOptionsMessage={({ inputValue }) =>
                  inputValue.trim().length == 0
                    ? "¡Sugerencias se aparecerán al empezar a escribir!"
                    : "Ninguna opción corresponde a esta búsqueda."
                }
                loadingMessage={() => "Cargando opciones…"}
                onChange={updateSelectedRepsValue}
                defaultValue={receptores}
              />
            </FieldSet>

            <FieldSet>
              <Label htmlFor="s">Escribo por el tema:</Label>
              <TextInput
                name="s"
                required
                autoComplete="off"
                defaultValue={sujeto}
                onChange={({ target: { value } }) => updateSubjectValue(value)}
              />

              <Label htmlFor="m">Les quisiera decir:</Label>
              <TextArea
                name="m"
                required
                defaultValue={mensaje}
                onChange={({ target: { value } }) => updateMessageValue(value)}
              />
            </FieldSet>

            <FieldSet>
              <Accordion items={[
                {
                  title: "¡Envíalo!",
                  id: "enviar",
                  content:
                    <>
                      <p>información</p>
                      <Button type="submit" formAction="/api/mensaje/enviar">
                        Genera un correo electrónico
                      </Button>
                    </>
                },
                {
                  title: "Comparte como plantilla",
                  id: "compartir",
                  content:
                    <>
                      <p>información</p>
                      <Button
                        type="submit"
                        formAction="/api/mensaje/compartir"
                        onClick={shallowSharingUpdate}
                      >
                        {mensaje
                          ? "Actualiza el enlace de compartir"
                          : "Genera un enlace de compartir"
                        }
                      </Button>
                      <QRCode renderAs="svg" value={domain + messagePath} />
                    </>
                }
              ]} />
            </FieldSet>
          </Form>
        </section>
      </main>
    </>
  )
}

export default Mensaje
